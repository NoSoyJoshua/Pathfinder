{"version":3,"sources":["components/Header/Header.jsx","components/Logo/Logo.jsx","components/DropDownMenu/DropDownMenu.jsx","components/DropDownHead/DropDownHead.jsx","components/GenericButton/GenericButton.jsx","components/StartButton/StartButton.jsx","components/Main/Main.jsx","components/ClearButtonsContainer/ClearButtonsContainer.jsx","components/ClearButton/ClearButton.jsx","components/GridContainer/GridContainer.jsx","components/GridNode/GridNode.jsx","components/GridBoard/GridBoard.jsx","components/WindowWarning/WindowWarning.jsx","algorithms/dfs.js","algorithms/functions.js","dataEstructures/queue.js","algorithms/mazeGen.js","components/App/App.jsx","algorithms/bfs.js","index.js"],"names":["Header","props","react_default","a","createElement","children","Logo","className","data","DropDownMenu","DropDownItem","href","onClick","e","onChange","currentTarget","innerText","changeParentState","name","listItems","map","item","key","DropDownHead","_useState","useState","_useState2","Object","slicedToArray","open","setOpen","_useState3","_useState4","selected","setSelected","DropDownMenu_DropDownMenu","GenericButton","StartButton","Main","ClearButtonsContainer","ClearButton","clearingFunction","GridContainer","GridNode","content","seen","alterBoard","x","y","onContextMenu","preventDefault","GridBoard","board","row","node","GridNode_GridNode","isStart","isEnd","isWall","isPath","isSeen","WindowWarning","title","src","width","height","frameBorder","class","allowFullScreen","newBoard","boardSeen","wholePath","pathToEnd","findNeighbors","i","dx","dy","neighbors","nx","ny","length","push","Queue","size","classCallCheck","this","rear","element","isEmpty","shift","console","log","tempBoard","gridBoard","j","getWindowSize","_window","window","innerWidth","innerHeight","App","windowSize","setWindowSize","start","setStart","_useState5","_useState6","speed","setSpeed","_useState7","_useState8","setBoard","_useState9","_useState10","setWholePath","_useState11","_useState12","mazePath","setMazePath","_useState13","_useState14","path","setPath","_useState15","_useState16","algorithm","setAlgorithm","findStartAndEnd","end","forEach","clearPath","toConsumableArray","clearBoard","useEffect","handleWindowResize","addEventListener","removeEventListener","myInterval","setInterval","clearInterval","setTimeout","drawPath","drawWholePath","drawMaze","Fragment","components_Header_Header","Logo_Logo","DropDownHead_DropDownHead","text","toLowerCase","GenericButton_GenericButton","newMazePath","mazeGen","boardDimX","boardDimY","root","cell","objectSpread","wall","orientation","dimX","dimY","Math","floor","random","emptyNodes","notEmpty","mainDims","crossDim","visualizeMaze","StartButton_StartButton","result","startAndEnd","dfs","startXY","endXY","parent","currentNode","boardDimentions","queue","add","_loop","current","pop","neighbor","bfs","newWholePath","newPath","reverse","visualizeAlgorithm","Main_Main","ClearButtonsContainer_ClearButtonsContainer","ClearButton_ClearButton","GridContainer_GridContainer","GridBoard_GridBoard","started","type","boardEnds","WindowWarning_WindowWarning","ReactDOM","createRoot","document","getElementById","render","StrictMode","components_App_App"],"mappings":"odAWeA,MARf,SAAgBC,GACd,OACEC,EAAAC,EAAAC,cAAA,cACGH,EAAMI,iBCHE,SAASC,EAAKL,GAC3B,OACIC,EAAAC,EAAAC,cAAA,MAAIG,UAAU,QAAQN,EAAMO,YCFnB,SAASC,EAAaR,GAEjC,SAASS,EAAaT,GAClB,OACIC,EAAAC,EAAAC,cAAA,KAAGO,KAAK,IAAIJ,UAAU,gBAAgBK,QAAS,SAAAC,GAC3CZ,EAAMa,SAASD,EAAEE,cAAcC,WAC/Bf,EAAMgB,kBAAkBJ,EAAEE,cAAcC,aACxCf,EAAMiB,MAIlB,OACIhB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,YACVN,EAAMkB,UAAUC,IAAI,SAAAC,GAAI,OAAInB,EAAAC,EAAAC,cAACM,EAAD,CAAcY,IAAKD,EAAMH,KAAMG,EAAMP,SAAUb,EAAMa,SAAUG,kBAAmBhB,EAAMgB,6BCZlH,SAASM,EAAatB,GAAO,IAAAuB,EAClBC,oBAAS,GADSC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACnCK,EADmCH,EAAA,GAC7BI,EAD6BJ,EAAA,GAAAK,EAEVN,mBAASxB,EAAMiB,MAFLc,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEnCE,EAFmCD,EAAA,GAEzBE,EAFyBF,EAAA,GAI1C,OACE9B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBAAgBK,QAAS,kBAAMkB,GAASD,KACpDI,EADH,IACa/B,EAAAC,EAAAC,cAAA,KAAGG,UAAU,2BAEvBsB,GAAQ3B,EAAAC,EAAAC,cAAC+B,EAAD,CAAclB,kBAAmBhB,EAAMgB,kBAAmBE,UAAWlB,EAAMkB,UAAWL,SAAUoB,WCThG,SAASE,EAAcnC,GACpC,OACEC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBAAiBK,QAASX,EAAMW,SAAUX,EAAMiB,YCFpD,SAASmB,EAAYpC,GAClC,OACEC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eAAeK,QAASX,EAAMW,SAA7C,gBCDW,SAAS0B,EAAKrC,GAC3B,OACEC,EAAAC,EAAAC,cAAA,YACKH,EAAMI,gBCJA,SAASkC,EAAsBtC,GAC5C,OACEC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACZN,EAAMI,gBCHE,SAASmC,EAAYvC,GAClC,OACEC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eAAeK,QAASX,EAAMwC,kBAA7C,SAAsExC,EAAMO,YCFjE,SAASkC,EAAczC,GACpC,OACEC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACVN,EAAMI,gBCHA,SAASsC,EAAS1C,GAiB/B,OACEC,EAAAC,EAAAC,cAAA,OAAKG,UAAW,aAAeN,EAAM2C,QAAU,IAAM3C,EAAM4C,KAAMjC,QAXnE,WACwB,YAAlBX,EAAM2C,QACR3C,EAAM6C,WAAW7C,EAAM8C,EAAG9C,EAAM+C,EAAG,WACR,YAAlB/C,EAAM2C,QACf3C,EAAM6C,WAAW7C,EAAM8C,EAAG9C,EAAM+C,EAAG,WACR,UAAlB/C,EAAM2C,SACf3C,EAAM6C,WAAW7C,EAAM8C,EAAG9C,EAAM+C,EAAG,UAKoEC,cAAe,SAAApC,GACtHA,EAAEqC,iBAjBkB,YAAlBjD,EAAM2C,SAA2C,WAAlB3C,EAAM2C,SACvC3C,EAAM6C,WAAW7C,EAAM8C,EAAG9C,EAAM+C,EAAG,YAmBhB,YAAlB/C,EAAM2C,QAAwB1C,EAAAC,EAAAC,cAAA,KAAGG,UAAW,oBAAsBN,EAAM2C,UAAkC,UAAlB3C,EAAM2C,QAAsB1C,EAAAC,EAAAC,cAAA,KAAGG,UAAW,8BAAgCN,EAAM2C,UAAkC,WAAlB3C,EAAM2C,QAAuB1C,EAAAC,EAAAC,cAAA,KAAGG,UAAW,qBAAuBN,EAAM2C,UAAgB,UCrBxQ,SAASO,EAAUlD,GAChC,OACEC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACVN,EAAMmD,MAAMhC,IAAI,SAAAiC,GAAG,OAAIA,EAAIjC,IAAI,SAAAkC,GAAI,OAAIpD,EAAAC,EAAAC,cAACmD,EAAD,CAAUjC,IAAKgC,EAAKP,EAAIO,EAAKN,EAAGD,EAAGO,EAAKP,EAAGC,EAAGM,EAAKN,EAAGJ,QAASU,EAAKE,QAAU,UAAYF,EAAKG,MAAQ,QAAUH,EAAKI,OAAS,SAAW,UAAWb,KAAMS,EAAKK,OAAQ,SAAWL,EAAKM,OAAS,SAAW,YAAad,WAAY7C,EAAM6C,wBCJ5Q,SAASe,IACtB,OACE3D,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACXL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,eAAd,iBACAL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,iBAAb,6FACAL,EAAAC,EAAAC,cAAA,UAAQ0D,MAAM,UAAUC,IAAI,6CAA6CC,MAAM,MAAMC,OAAO,MAAMC,YAAY,IAAIC,MAAM,cAAcC,iBAAe,SCNzJC,EAAUC,EAAWC,EAAWC,QCF7B,SAASC,EAAc1B,EAAGC,EAAGI,EAAOkB,GACvC,IAAII,EAAI,EAEFC,EAAK,CAAC,EAAI,GAAI,EAAG,GACjBC,EAAK,CAAC,GAAI,EAAI,EAAG,GAEnBC,EAAY,GAChB,IAAKH,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACpB,IAAMI,EAAK/B,EAAI4B,EAAGD,GACZK,EAAK/B,EAAI4B,EAAGF,GACCK,GAAM,GAAKA,EAAK3B,EAAM4B,QAAYF,GAAM,GAAKA,EAAK1B,EAAM,GAAG4B,SAEpC,IAAzB5B,EAAM2B,GAAID,GAAIpB,SAA0C,IAAtBY,EAAUS,GAAID,IAC7DD,EAAUI,KAAK7B,EAAM2B,GAAID,IAIjC,OAAOD,oBCjBUK,aACjB,SAAAA,EAAYC,GAAMxD,OAAAyD,EAAA,EAAAzD,CAAA0D,KAAAH,GACdG,KAAK7E,KAAO,GACZ6E,KAAKC,KAAO,EACZD,KAAKF,KAAOA,kDAGZI,GACGF,KAAKC,KAAOD,KAAKF,OAChBE,KAAK7E,KAAK6E,KAAKC,MAAQC,EACvBF,KAAKC,KAAOD,KAAKC,KAAO,oCAK5B,OAAOD,KAAKC,uCAIZ,OAAqB,IAAdD,KAAKC,wCAIZ,IAAsB,IAAnBD,KAAKG,UACJ,OAAOH,KAAK7E,KAAK,qCAKrB,IAAsB,IAAnB6E,KAAKG,UACJ,OAAOH,KAAK7E,KAAM6E,KAAKC,KAAO,iCAKlC,IAAsB,IAAnBD,KAAKG,UAEJ,OADAH,KAAKC,KAAOD,KAAKC,KAAK,EACfD,KAAK7E,KAAKiF,wCAKrB,IAAI,IAAIf,EAAG,EAAGA,EAAIW,KAAKC,KAAMZ,IACzBgB,QAAQC,IAAIN,KAAK7E,KAAKkE,oCAK1BW,KAAK7E,KAAKwE,OAAS,EACnBK,KAAKC,KAAO,eCjDhBM,EAAWrB,SCqBf,IADA,IAAIsB,EAAY,GACPnB,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAEzB,IADA,IAAIrB,EAAM,GACDyC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAIxC,EAAO,CACTP,EAAG+C,EACH9C,EAAG0B,EACHlB,SAAS,EACTC,OAAO,EACPC,QAAQ,EACRE,QAAQ,EACRD,QAAQ,GAEVN,EAAI4B,KAAK3B,GAEXuC,EAAUZ,KAAK5B,GAqQrB,SAAS0C,IAAgB,IAAAC,EACWC,OAClC,MAAO,CAACC,WAFeF,EAChBE,WACaC,YAFGH,EACJG,aAINC,MAvQf,WAAe,IAAA5E,EACuBC,mBAASsE,KADhCrE,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACN6E,EADM3E,EAAA,GACM4E,EADN5E,EAAA,GAAAK,EAEaN,oBAAS,GAFtBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENwE,EAFMvE,EAAA,GAECwE,EAFDxE,EAAA,GAAAyE,EAGahF,mBAAS,IAHtBiF,EAAA/E,OAAAC,EAAA,EAAAD,CAAA8E,EAAA,GAGNE,EAHMD,EAAA,GAGCE,EAHDF,EAAA,GAAAG,EAIapF,mBAASoE,GAJtBiB,EAAAnF,OAAAC,EAAA,EAAAD,CAAAkF,EAAA,GAINzD,EAJM0D,EAAA,GAICC,EAJDD,EAAA,GAAAE,EAKsBvF,mBAAS,IAL/BwF,EAAAtF,OAAAC,EAAA,EAAAD,CAAAqF,EAAA,GAKNzC,EALM0C,EAAA,GAKMC,EALND,EAAA,GAAAE,EAMmB1F,mBAAS,IAN5B2F,EAAAzF,OAAAC,EAAA,EAAAD,CAAAwF,EAAA,GAMNE,EANMD,EAAA,GAMIE,EANJF,EAAA,GAAAG,EAOW9F,mBAAS,IAPpB+F,EAAA7F,OAAAC,EAAA,EAAAD,CAAA4F,EAAA,GAONE,EAPMD,EAAA,GAOAE,EAPAF,EAAA,GAAAG,GAQqBlG,mBAAS,OAR9BmG,GAAAjG,OAAAC,EAAA,EAAAD,CAAAgG,GAAA,GAQNE,GARMD,GAAA,GAQKE,GARLF,GAAA,GA2Jb,SAASG,KACP,IAAIxB,EAAQ,GACRyB,EAAM,GAUV,OARA5E,EAAM6E,QAAQ,SAAA5E,GAAG,OAAIA,EAAI4E,QAAQ,SAAA3E,GAC3BA,EAAKE,QACP+C,EAAMtB,KAAK3B,GACFA,EAAKG,OACduE,EAAI/C,KAAK3B,OAIL,CAACiD,EAAOyB,GA4BlB,SAASE,KACP,IAAI3B,EAAJ,CACA,IAAIlC,EAAQ1C,OAAAwG,EAAA,EAAAxG,CAAOyB,GACnBiB,EAAS4D,QAAQ,SAAA5E,GAAG,OAAIA,EAAI4E,QAAQ,SAAA3E,GAClCA,EAAKM,QAAS,EACdN,EAAKK,QAAS,MAEhBoD,EAAS1C,IAGX,SAAS+D,KACP,IAAI7B,EAAJ,CACA,IAAIlC,EAAQ1C,OAAAwG,EAAA,EAAAxG,CAAOyB,GACnBiB,EAAS4D,QAAQ,SAAA5E,GAAG,OAAIA,EAAI4E,QAAQ,SAAA3E,GAClCA,EAAKE,SAAU,EACfF,EAAKG,OAAQ,EACbH,EAAKI,QAAS,EACdJ,EAAKM,QAAS,EACdN,EAAKK,QAAS,MAEhBoD,EAAS1C,IAcX,OA3NAgE,oBAAU,WACR,SAASC,IACPhC,EAAcP,KAKhB,OAFAE,OAAOsC,iBAAiB,SAAUD,GAE3B,WACLrC,OAAOuC,oBAAoB,SAAUF,KAEtC,IAEHD,oBAAW,YA4FX,WACE,IAAI3D,EAAI,EACR,GAAKH,EACL,IAAIkE,EAAaC,YAAa,WAC5B,GAAIhE,EAAIH,EAAUS,OAAQ,CACxB,IAAIjC,EAAIwB,EAAUG,GAAG3B,EACjBC,EAAIuB,EAAUG,GAAG1B,EACjBqB,EAAQ1C,OAAAwG,EAAA,EAAAxG,CAAOyB,GACnBiB,EAASrB,GAAGD,GAAGa,QAAS,EACxBmD,EAAS1C,GACTK,IAEEA,IAAMH,EAAUS,SAClB2D,cAAcF,GACdG,WAAW,YAOjB,WACE,IAAIlE,EAAI,EAER,GAAK+C,EACL,IAAIgB,EAAaC,YAAa,WAC5B,GAAIhE,EAAI+C,EAAKzC,OAAQ,CACnB,IAAIjC,EAAI0E,EAAK/C,GAAG3B,EACZC,EAAIyE,EAAK/C,GAAG1B,EACZqB,EAAQ1C,OAAAwG,EAAA,EAAAxG,CAAOyB,GACnBiB,EAASrB,GAAGD,GAAGY,QAAS,EACxBoD,EAAS1C,GACTK,IAEEA,IAAM+C,EAAKzC,SACb2D,cAAcF,GACdjC,GAAS,KAEVG,GAvBGkC,IACC,OAEJlC,GA7GHmC,IACC,CAACvE,IAEJ8D,oBAAW,YAsEX,WACE,IAAI3D,EAAI,EACJ+D,EAAaC,YAAa,WAC5B,GAAIhE,EAAI2C,EAASrC,OAAQ,CACvB,IAAIjC,EAAIsE,EAAS3C,GAAG3B,EAChBC,EAAIqE,EAAS3C,GAAG1B,EAChBqB,EAAQ1C,OAAAwG,EAAA,EAAAxG,CAAOyB,GACnBiB,EAASrB,GAAGD,GAAGW,QAAS,EACxBqD,EAAS1C,GACTK,IAEEA,IAAM2C,EAASrC,SACjB2D,cAAcF,GACdjC,GAAS,KAEV,IApFHuC,IACC,CAAC1B,IA0MFnH,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACV8F,EAAWH,YAAc,KACxBhG,EAAAC,EAAAC,cAAAF,EAAAC,EAAA6I,SAAA,KACE9I,EAAAC,EAAAC,cAAC6I,EAAD,KACE/I,EAAAC,EAAAC,cAAC8I,EAAD,CAAM1I,KAAK,eACXN,EAAAC,EAAAC,cAAC+I,EAAD,CAAcjI,KAAK,aAAaD,kBA/K5C,SAAyBmI,GACvBtB,GAAasB,EAAKC,gBA8K4DlI,UAAW,CAAC,MAAO,SACvFjB,EAAAC,EAAAC,cAAC+I,EAAD,CAAcjI,KAAK,QAAQD,kBA1LvC,SAAqBmI,GACN,SAATA,EACFxC,EAAS,KACS,WAATwC,EACTxC,EAAS,KACS,SAATwC,GACTxC,EAAS,KAoL0DzF,UAAW,CAAC,OAAQ,SAAU,UACzFjB,EAAAC,EAAAC,cAACkJ,EAAD,CAAepI,KAAK,OAAON,QArMvC,WACO2F,IACH6B,KACA5B,GAAS,GACLa,GAoBR,WACE,IAAIkC,EAEJA,EDvGW,SAASC,EAAQpG,EAAOqG,EAAWC,EAAWC,GAEzD,GAAIA,EAAM,CACN/D,EAAYxC,EAAMhC,IAAI,SAAAiC,GAAG,OAAIA,EAAIjC,IAAI,SAAAwI,GAAI,OAAAjI,OAAAkI,EAAA,EAAAlI,CAAA,GAASiI,EAAT,CAAeE,MAAM,QAC9DvF,EAAY,GAEZ,IAAK,IAAIG,EAAI,EAAGA,EAAItB,EAAM,GAAG4B,OAAQN,IACjCkB,EAAU,GAAGlB,GAAGoF,MAAO,EACvBvF,EAAUU,KAAKW,EAAU,GAAGlB,IAE5BkB,EAAUxC,EAAM4B,OAAS,GAAGN,GAAGoF,MAAO,EACtCvF,EAAUU,KAAKW,EAAUxC,EAAM4B,OAAS,GAAGN,IAG/C,IAAK,IAAIA,EAAI,EAAGA,EAAItB,EAAM4B,OAAQN,IAC9BkB,EAAUlB,GAAG,GAAGoF,MAAO,EACvBvF,EAAUU,KAAKW,EAAUlB,GAAG,IAE5BkB,EAAUlB,GAAGtB,EAAM,GAAG4B,OAAS,GAAG8E,MAAO,EACzCvF,EAAUU,KAAKW,EAAUlB,GAAGtB,EAAM,GAAG4B,OAAS,IAKtD,IAGI+E,EAHAC,EAAOP,EAAU,GAAKA,EAAU,GAAK,EACrCQ,EAAOP,EAAU,GAAKA,EAAU,GAAK,EAWzC,IAPIK,EADAC,EAAOC,KAEAD,EAAOC,IAGA,EAAC,GAAM,GAAOC,KAAKC,MAAsB,EAAhBD,KAAKE,aAG5BJ,EAAO,GAAKC,EAAO,EAAI,CACvC,IAAIlH,EAAImH,KAAKC,MAAMD,KAAKE,UAAYJ,EAAO,IAAMP,EAAU,GAAK,EAC5DY,EAAa,GACjBA,EAAWpF,KAAKiF,KAAKC,MAAMD,KAAKE,SAAWH,GAAQP,EAAU,KAEjB,IAAxC9D,EAAU8D,EAAU,GAAK,GAAG3G,GAAG+G,MAC/BO,EAAWpF,KAAKyE,EAAU,KAGc,IAAxC9D,EAAU8D,EAAU,GAAK,GAAG3G,GAAG+G,MAC/BO,EAAWpF,KAAKyE,EAAU,IAG1BW,EAAWrF,OAAS,GACpBqF,EAAW5E,QAGf,IAAK,IAAIf,EAAIgF,EAAU,GAAIhF,GAAKgF,EAAU,GAAIhF,IAAK,CAE/C,IADA,IAAI4F,GAAW,EACNxE,EAAI,EAAGA,EAAIuE,EAAWrF,OAAQc,IACnC,GAAIpB,IAAM2F,EAAWvE,GAAI,CACrBwE,GAAW,EACX,MAGJA,IACA1E,EAAUlB,GAAG3B,GAAG+G,MAAQlE,EAAUlB,GAAG3B,GAAG+G,KACxCvF,EAAUU,KAAKW,EAAUlB,GAAG3B,KAQpC,IAJA,IAAIwH,EAAW,CAAE,CAACd,EAAU,GAAI1G,EAAI,GAAI,CAACA,EAAI,EAAG0G,EAAU,KAEtDe,EAAWd,EAENhF,EAAI,EAAGA,EAAI,EAAGA,IACnB8E,EAAQpG,EAAOmH,EAAS7F,GAAI8F,GAAU,QAGvC,IAAKT,GAAgBC,EAAO,GAAKC,EAAO,EAAI,CAC/C,IAAIjH,EAAIkH,KAAKC,MAAMD,KAAKE,UAAYH,EAAO,IAAMP,EAAU,GAAK,EAC5DW,EAAa,GACjBA,EAAWpF,KAAKiF,KAAKC,MAAMD,KAAKE,SAAWJ,GAAQP,EAAU,KAEjB,IAAxC7D,EAAU5C,GAAGyG,EAAU,GAAK,GAAGK,MAC/BO,EAAWpF,KAAKwE,EAAU,KAGc,IAAxC7D,EAAU5C,GAAGyG,EAAU,GAAK,GAAGK,MAC/BO,EAAWpF,KAAKwE,EAAU,IAG1BY,EAAWrF,OAAS,GACpBqF,EAAW5E,QAGf,IAAK,IAAIf,EAAI+E,EAAU,GAAI/E,GAAK+E,EAAU,GAAI/E,IAAK,CAE/C,IADA,IAAI4F,GAAW,EACNxE,EAAI,EAAGA,EAAIuE,EAAWrF,OAAQc,IACnC,GAAIpB,IAAM2F,EAAWvE,GAAI,CACrBwE,GAAW,EACX,MAGJA,IACA1E,EAAU5C,GAAG0B,GAAGoF,MAAQlE,EAAU5C,GAAG0B,GAAGoF,KACxCvF,EAAUU,KAAKW,EAAU5C,GAAG0B,KAQpC,IAJA,IAAI6F,EAAW,CAAE,CAACb,EAAU,GAAI1G,EAAI,GAAI,CAACA,EAAI,EAAG0G,EAAU,KAEtDc,EAAWf,EAEN/E,EAAI,EAAGA,EAAI,EAAGA,IACnB8E,EAAQpG,EAAOoH,EAAUD,EAAS7F,IAAI,GAI9C,OAAOH,ECZOiF,CAAQpG,EAAO,CAAC,EAAGA,EAAM,GAAG4B,OAAS,GAAI,CAAC,EAAG5B,EAAM4B,OAAS,IAAI,GAE9EsC,EAAY,kBAAMiC,IAxBdkB,OAiMMvK,EAAAC,EAAAC,cAACsK,EAAD,CAAa9J,QAhNzB,WACO2F,IACH2B,KACA1B,GAAS,GACLjC,GAsCR,WACE,IACIoG,EADAC,EAAc7C,KAGlB,GAA8B,IAA1B6C,EAAY,GAAG5F,QAA0C,IAA1B4F,EAAY,GAAG5F,QAA8B,KAAd6C,GAAkB,CAEhE,QAAdA,GACF8C,EJjHO,SAASE,EAAIzH,EAAO0H,EAASC,EAAOpB,GAE/C,GAAIA,EAAM,CACNtF,EAAQ1C,OAAAwG,EAAA,EAAAxG,CAAOyB,GACfmB,EAAY,GACZC,EAAY,GAEZF,EAAY,GACZ,IAAK,IAAII,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAEzB,IADA,IAAIrB,EAAM,GACDyC,EAAI,EAAGA,EAAI,GAAIA,IACpBzC,EAAI4B,MAAK,GAEbX,EAAUW,KAAK5B,IAIvB,IAAIkD,EAAQlC,EAASyG,EAAQ,IAAIA,EAAQ,IACrC9C,EAAM3D,EAAS0G,EAAM,IAAIA,EAAM,IAGnC,GAAID,EAAQ,KAAOC,EAAM,IAAMD,EAAQ,KAAOC,EAAM,GAChD,MAAO,CAACxG,EAAWC,GAAW,GAIlCF,EAAUiC,EAAMvD,GAAGuD,EAAMxD,IAAK,EAG9BwB,EAAUU,KAAKsB,GAIf,IADA,IAAI1B,EAAYJ,EAAc8B,EAAMxD,EAAGwD,EAAMvD,EAAGqB,EAAUC,GACjDI,EAAI,EAAGA,EAAIG,EAAUG,OAAQN,IAIlC,GAHAG,EAAUH,GAAGsG,OAASzE,EAGlBsE,EAAIxG,EAAU,CAACQ,EAAUH,GAAG3B,EAAG8B,EAAUH,GAAG1B,GAAI,CAACgF,EAAIjF,EAAGiF,EAAIhF,IAAI,GAAO,GAAI,CAG3E,GAAI2G,EAAM,CAEN,IADA,IAAIsB,EAAcjD,EACXiD,EAAYlI,IAAMwD,EAAMxD,GAAKkI,EAAYjI,IAAMuD,EAAMvD,GACxDwB,EAAUS,KAAKgG,GACfA,EAAcA,EAAYD,OAG1BC,EAAYlI,IAAMwD,EAAMxD,GAAKkI,EAAYjI,IAAMuD,EAAMvD,GACrDwB,EAAUS,KAAKgG,GAIvB,MAAO,CAAC1G,EAAWC,GAAW,GAItC,MAAO,CAACD,EAAWC,GAAW,GIyDjBqG,CAAIzH,EAAO,CAACwH,EAAY,GAAG,GAAG7H,EAAG6H,EAAY,GAAG,GAAG5H,GAAI,CAAC4H,EAAY,GAAG,GAAG7H,EAAG6H,EAAY,GAAG,GAAG5H,IAAI,GACrF,QAAd6E,KACT8C,ECpHO,SAAavH,EAAO0H,EAASC,GAKxC,IAJA,IAAMG,EAAkB9H,EAAM4B,OAAS5B,EAAM,GAAG4B,OAC1CmG,EAAQ,IAAIjG,EAAMgG,GAEpB5G,EAAY,GACPI,EAAI,EAAGA,EAAItB,EAAM4B,OAAQN,IAAK,CAEnC,IADA,IAAIrB,EAAM,GACDyC,EAAI,EAAGA,EAAI1C,EAAM,GAAG4B,OAAQc,IACjCzC,EAAI4B,MAAK,GAEbX,EAAUW,KAAK5B,GAGnB,IAAMkB,EAAY,GACZC,EAAY,GAEZH,EAAQ1C,OAAAwG,EAAA,EAAAxG,CAAOyB,GAEjBmD,EAAQlC,EAASyG,EAAQ,IAAIA,EAAQ,IACrC9C,EAAM3D,EAAS0G,EAAM,IAAIA,EAAM,IAEnCI,EAAMC,IAAI7E,GAEV,IAvB+C,IAAA8E,EAAA,WAwB3C,IAAIC,EAAUH,EAAMI,MAGpB,GAFAhH,EAAUU,KAAKqG,GAEXA,IAAYtD,EACZ,cAGYvD,EAAc6G,EAAQvI,EAAGuI,EAAQtI,EAAGqB,EAAUC,GACpD2D,QAAQ,SAAAuD,GACdL,EAAMC,IAAII,GACVlH,EAAUkH,EAASxI,GAAGwI,EAASzI,IAAK,EACpCyI,EAASR,OAASM,KAZnBH,EAAMnG,SAAW,GAAG,UAAAqG,MAiB3B,IADA,IAAIJ,EAAcjD,EACXiD,EAAYlI,IAAMwD,EAAMxD,GAAKkI,EAAYjI,IAAMuD,EAAMvD,GACxDwB,EAAUS,KAAKgG,GACfA,EAAcA,EAAYD,OAO9B,OAJIC,EAAYlI,IAAMwD,EAAMxD,GAAKkI,EAAYjI,IAAMuD,EAAMvD,GACrDwB,EAAUS,KAAKgG,GAGZ,CAAC1G,EAAWC,GDmENiH,CAAIrI,EAAO,CAACwH,EAAY,GAAG,GAAG7H,EAAG6H,EAAY,GAAG,GAAG5H,GAAI,CAAC4H,EAAY,GAAG,GAAG7H,EAAG6H,EAAY,GAAG,GAAG5H,KAG1G,IAAI0I,EAAef,EAAO,GACtBgB,EAAUhB,EAAO,GACrBgB,EAAQC,UAER1E,EAAa,kBAAMwE,IACnBhE,EAAQ,kBAAMiE,SAGdnF,GAAS,GAzDPqF,OA4MM3L,EAAAC,EAAAC,cAAC8I,EAAD,CAAM1I,KAAM,gBAEdN,EAAAC,EAAAC,cAAC0L,EAAD,KACE5L,EAAAC,EAAAC,cAAC2L,EAAD,KACE7L,EAAAC,EAAAC,cAAC4L,EAAD,CAAaxL,KAAK,OAAOiC,iBAAkByF,KAC3ChI,EAAAC,EAAAC,cAAC4L,EAAD,CAAaxL,KAAK,QAAQiC,iBAAkB2F,KAC5ClI,EAAAC,EAAAC,cAAC4L,EAAD,CAAaxL,KAAK,QAAQiC,iBA3BxC,WACE,IAAI8D,EAAJ,CACA,IAAIlC,EAAQ1C,OAAAwG,EAAA,EAAAxG,CAAOyB,GACnBiB,EAAS4D,QAAQ,SAAA5E,GAAG,OAAIA,EAAI4E,QAAQ,SAAA3E,GAClCA,EAAKI,QAAS,EACdJ,EAAKM,QAAS,EACdN,EAAKK,QAAS,MAEhBoD,EAAS1C,QAqBCnE,EAAAC,EAAAC,cAAC6L,EAAD,KACE/L,EAAAC,EAAAC,cAAC8L,EAAD,CAAWC,QAAS5F,EAAOnD,MAAOA,EAAON,WA9EvD,SAAoBC,EAAGC,EAAGoJ,GACxB,IAAI7F,EAAJ,CAEAW,EAAa,IACbQ,EAAQ,IACRQ,KACA,IAAI7D,EAAQ1C,OAAAwG,EAAA,EAAAxG,CAAOyB,GAEnB,GAAa,YAATgJ,EAAoB,CACtB,IAAIC,EAAYtE,KACY,IAAxBsE,EAAU,GAAGrH,QACfX,EAASrB,GAAGD,GAAGS,SAAU,EACzBuD,EAAS1C,IACwB,IAAxBgI,EAAU,GAAGrH,SACtBX,EAASrB,GAAGD,GAAGU,OAAQ,EACvBsD,EAAS1C,IAIA,WAAT+H,GAA8B,YAATA,GAA+B,UAATA,IAC7C/H,EAASrB,GAAGD,GAAGqJ,IAAS/H,EAASrB,GAAGD,GAAGqJ,GACvCrF,EAAS1C,WA6DHnE,EAAAC,EAAAC,cAACkM,EAAD,cE7RCC,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHzM,EAAAC,EAAAC,cAACF,EAAAC,EAAMyM,WAAP,KACE1M,EAAAC,EAAAC,cAACyM,EAAD","file":"static/js/main.5003f604.chunk.js","sourcesContent":["import React from 'react'\nimport './Header.css';\n\nfunction Header(props) {\n  return (\n    <header>\n      {props.children}\n    </header>\n  )\n}\n\nexport default Header;","import React from 'react'\nimport './Logo.css';\n\nexport default function Logo(props) {\n  return (\n      <h1 className=\"logo\">{props.data}</h1>\n  )\n}\n","import React from 'react'\nimport './DropDownMenu.css'\n\nexport default function DropDownMenu(props) {\n    \n    function DropDownItem(props) {\n        return (\n            <p href=\"#\" className=\"dropdown-item\" onClick={e => {\n                props.onChange(e.currentTarget.innerText)\n                props.changeParentState(e.currentTarget.innerText)\n            }}>{props.name}</p>\n        )\n    }\n\n    return (\n        <div className='dropdown'>\n            {props.listItems.map(item => <DropDownItem key={item} name={item} onChange={props.onChange} changeParentState={props.changeParentState}/>)}\n        </div>\n    )\n}\n","import React, { useState } from 'react'\nimport DropDownMenu from \"../DropDownMenu/DropDownMenu\";\nimport './DropDownHead.css'\n\nexport default function DropDownHead(props) {\n  const [open, setOpen] = useState(false);\n  const [selected, setSelected] = useState(props.name);\n\n  return (\n    <div className=\"dropdown-menu\" onClick={() => setOpen(!open)}>\n      {selected} <i className=\"fa-solid fa-caret-down\"></i>\n      \n      {open && <DropDownMenu changeParentState={props.changeParentState} listItems={props.listItems} onChange={setSelected}/>}\n\n    </div>\n  )\n}\n","import React from 'react'\nimport './GenericButton.css'\n\nexport default function GenericButton(props) {\n  return (\n    <div className=\"generic-button\" onClick={props.onClick}>{props.name}</div>\n  )\n}\n","import React from 'react';\nimport './StartButton.css';\n\nexport default function StartButton(props) {\n  return (\n    <div className=\"start-button\" onClick={props.onClick}>Start!</div>\n  )\n}\n","import React from 'react'\n\nimport './Main.css'\n\nexport default function Main(props) {\n  return (\n    <main>\n        {props.children}\n    </main>\n  )\n}\n","import React from 'react'\nimport './ClearButtonsContainer.css';\n\nexport default function ClearButtonsContainer(props) {\n  return (\n    <div className=\"container\">\n      {props.children}\n    </div>\n  )\n}\n","import React from 'react';\nimport './ClearButton.css';\n\nexport default function ClearButton(props) {\n  return (\n    <div className=\"clear-button\" onClick={props.clearingFunction}>Clear {props.data}</div>\n  )\n}\n","import React from 'react';\nimport './GridContainer.css';\n\nexport default function GridContainer(props) {\n  return (\n    <div className=\"grid-container\">\n        {props.children}\n    </div>\n  )\n}\n","import React from 'react'\nimport './GridNode.css';\n\nexport default function GridNode(props) {\n  function changeContentToWall() {\n    if (props.content === \"isEmpty\" || props.content === \"isWall\") {\n      props.alterBoard(props.x, props.y, \"isWall\");\n    }\n  };\n\n  function changeContentToInitialOrFinal() {\n    if (props.content === \"isEmpty\") {\n      props.alterBoard(props.x, props.y, \"isEmpty\");\n    } else if (props.content === \"isStart\") {\n      props.alterBoard(props.x, props.y, \"isStart\");\n    } else if (props.content === \"isEnd\") {\n      props.alterBoard(props.x, props.y, \"isEnd\");\n    }\n  };\n\n  return (\n    <div className={\"grid-node \" + props.content + \" \" + props.seen} onClick={changeContentToInitialOrFinal} onContextMenu={e => {\n      e.preventDefault();\n      changeContentToWall();\n    }}>\n      {props.content === \"isStart\" ? <i className={\"fa-solid fa-play \" + props.content}></i> : props.content === \"isEnd\" ? <i className={\"fa-solid fa-flag-checkered \" + props.content}></i> : props.content === \"isWall\" ? <i className={\"fa-solid fa-ghost \" + props.content}></i> : \"\"}\n    </div>\n  )\n}\n","import React from 'react';\nimport GridNode from '../GridNode/GridNode';\nimport './GridBoard.css';\n\nexport default function GridBoard(props) {\n  return (\n    <div className=\"grid\">\n        {props.board.map(row => row.map(node => <GridNode key={node.x + node.y} x={node.x} y={node.y} content={node.isStart ? \"isStart\" : node.isEnd ? \"isEnd\" : node.isWall ? \"isWall\" : \"isEmpty\"} seen={node.isPath? \"isPath\" : node.isSeen ? \"isSeen\" : \"isNotSeen\"} alterBoard={props.alterBoard} />))}\n    </div>\n  )\n}\n","import React from 'react'\nimport \"./WindowWarning.css\"\n\nexport default function WindowWarning() {\n  return (\n    <div className=\"window-warning\">\n        <h1 className=\"error-title\">Window Error!</h1>\n        <p className=\"error-message\">The content of this page cannot be displayed in a screen with a width smaller than 1360px</p>\n        <iframe title=\"sad-gif\" src=\"https://giphy.com/embed/7SF5scGB2AFrgsXP63\" width=\"480\" height=\"272\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe>\n    </div>\n  )\n}\n","import { findNeighbors } from './functions';\n\nlet newBoard, boardSeen, wholePath, pathToEnd;\n\nexport default function dfs(board, startXY, endXY, root) {\n\n    if (root) {\n        newBoard = [...board];\n        wholePath = [];\n        pathToEnd = [];\n\n        boardSeen = [];\n        for (let i = 0; i < 15; i++) {\n            let row = [];\n            for (let j = 0; j < 41; j++) {\n                row.push(false);\n            }\n            boardSeen.push(row);\n        }\n    }\n\n    let start = newBoard[startXY[1]][startXY[0]];\n    let end = newBoard[endXY[1]][endXY[0]];\n\n    // Terminate if the goal is reached\n    if (startXY[0] === endXY[0] && startXY[1] === endXY[1]) {\n        return [wholePath, pathToEnd, true];\n    }\n\n    // Visite current node\n    boardSeen[start.y][start.x] = true;\n\n    // Add current node to whole path\n    wholePath.push(start);\n\n    // Take unvisited neighbors in order\n    let neighbors = findNeighbors(start.x, start.y, newBoard, boardSeen);\n    for (let i = 0; i < neighbors.length; i++) {\n        neighbors[i].parent = start;\n\n        // Recurse and Terminate if the goal is reached\n        if (dfs(newBoard, [neighbors[i].x, neighbors[i].y], [end.x, end.y], false)[2]) {\n\n            // Backtrack\n            if (root) {\n                let currentNode = end;\n                while (currentNode.x !== start.x || currentNode.y !== start.y) {\n                    pathToEnd.push(currentNode);\n                    currentNode = currentNode.parent;\n                }\n\n                if (currentNode.x !== start.x || currentNode.y !== start.y) {\n                    pathToEnd.push(currentNode);\n                }\n            }\n\n            return [wholePath, pathToEnd, true];\n        }\n    }\n\n    return [wholePath, pathToEnd, false];\n}","export function findNeighbors(x, y, board, boardSeen) {\n    let i = 0;\n\n    const dx = [1,  0, -1, 0];\n    const dy = [0, -1,  0, 1];\n\n    let neighbors = [];\n    for (i = 0; i < 4; i++) {\n        const nx = x + dx[i];\n        const ny = y + dy[i];\n        const condition = (ny >= 0 && ny < board.length) && (nx >= 0 && nx < board[0].length)\n\n        if (condition && board[ny][nx].isWall === false && boardSeen[ny][nx] === false) {\n            neighbors.push(board[ny][nx]);\n        }\n    }\n\n    return neighbors;\n}","export default class Queue {\n    constructor(size){\n        this.data = [];\n        this.rear = 0;\n        this.size = size;\n    }\n\n    add(element) {\n        if(this.rear < this.size ) {\n            this.data[this.rear] = element;\n            this.rear = this.rear + 1;\n        }\n    }\n\n    length() {  \n        return this.rear;\n    }\n\n    isEmpty() {\n        return this.rear === 0;\n    }\n\n    getFront() {\n        if(this.isEmpty() === false) {\n            return this.data[0];\n        }\n    }\n\n    getLast() {\n        if(this.isEmpty() === false) {\n            return this.data[ this.rear - 1 ] ;\n        }\n    }\n\n    pop() {\n        if(this.isEmpty() === false) {\n            this.rear = this.rear-1;\n            return this.data.shift();\n        }\n    }\n\n    print() { \n        for(let i =0; i < this.rear; i++) {\n            console.log(this.data[i]);\n        }\n    }\n\n    clear() {\n        this.data.length = 0;\n        this.rear = 0;\n    }\n }","let tempBoard, wholePath;\n\nexport default function mazeGen(board, boardDimX, boardDimY, root) {\n\n    if (root) {\n        tempBoard = board.map(row => row.map(cell => ({...cell, wall: false})));\n        wholePath = [];\n\n        for (let i = 0; i < board[0].length; i++) {\n            tempBoard[0][i].wall = true;\n            wholePath.push(tempBoard[0][i]);\n\n            tempBoard[board.length - 1][i].wall = true;\n            wholePath.push(tempBoard[board.length - 1][i]);\n        }\n\n        for (let i = 0; i < board.length; i++) {\n            tempBoard[i][0].wall = true;\n            wholePath.push(tempBoard[i][0]);\n\n            tempBoard[i][board[0].length - 1].wall = true;\n            wholePath.push(tempBoard[i][board[0].length - 1]);\n        }\n\n    }\n    \n    let dimX = boardDimX[1] - boardDimX[0] + 1;\n    let dimY = boardDimY[1] - boardDimY[0] + 1;\n    \n    let orientation;\n    if (dimX > dimY) {\n        orientation = true;\n    } else if (dimX < dimY) {\n        orientation = false;\n    } else {\n        orientation = [true, false][Math.floor(Math.random() * 2)];\n    }\n\n    if (orientation && (dimX > 2 && dimY > 2)) {\n        let x = Math.floor(Math.random() * (dimX - 2)) + boardDimX[0] + 1;\n        let emptyNodes = []\n        emptyNodes.push(Math.floor(Math.random() * dimY) + boardDimY[0]);\n\n        if (tempBoard[boardDimY[0] - 1][x].wall !== true) {  \n            emptyNodes.push(boardDimY[0]);\n        }\n\n        if (tempBoard[boardDimY[1] + 1][x].wall !== true) {\n            emptyNodes.push(boardDimY[1]);\n        }\n\n        if (emptyNodes.length > 1) {\n            emptyNodes.shift()\n        }\n\n        for (let i = boardDimY[0]; i <= boardDimY[1]; i++) {\n            let notEmpty = true;\n            for (let j = 0; j < emptyNodes.length; j++) {\n                if (i === emptyNodes[j]) {\n                    notEmpty = false;\n                    break;\n                }\n            }\n            if (notEmpty) {\n                tempBoard[i][x].wall = !tempBoard[i][x].wall;\n                wholePath.push(tempBoard[i][x]);\n            }\n        }\n\n        let mainDims = [ [boardDimX[0], x - 1], [x + 1, boardDimX[1]] ];\n\n        let crossDim = boardDimY;\n\n        for (let i = 0; i < 2; i++) {\n            mazeGen(board, mainDims[i], crossDim, false);\n        }\n\n    } else if (!orientation && (dimX > 2 && dimY > 2)) {\n        let y = Math.floor(Math.random() * (dimY - 2)) + boardDimY[0] + 1;\n        let emptyNodes = [];\n        emptyNodes.push(Math.floor(Math.random() * dimX) + boardDimX[0]);\n\n        if (tempBoard[y][boardDimX[0] - 1].wall !== true) {\n            emptyNodes.push(boardDimX[0]);\n        }\n\n        if (tempBoard[y][boardDimX[1] + 1].wall !== true) {\n            emptyNodes.push(boardDimX[1]);\n        }\n\n        if (emptyNodes.length > 1) {\n            emptyNodes.shift()\n        }\n        \n        for (let i = boardDimX[0]; i <= boardDimX[1]; i++) {\n            let notEmpty = true;\n            for (let j = 0; j < emptyNodes.length; j++) {\n                if (i === emptyNodes[j]) {\n                    notEmpty = false;\n                    break;\n                }\n            }\n            if (notEmpty) {\n                tempBoard[y][i].wall = !tempBoard[y][i].wall;\n                wholePath.push(tempBoard[y][i]);\n            }\n        }\n\n        let mainDims = [ [boardDimY[0], y - 1], [y + 1, boardDimY[1]] ];\n\n        let crossDim = boardDimX;\n\n        for (let i = 0; i < 2; i++) {\n            mazeGen(board, crossDim, mainDims[i], false);\n        }\n    }\n\n    return wholePath;\n}","import React, { useState, useEffect } from 'react';\nimport Header from '../Header/Header';\nimport Logo from '../Logo/Logo';\nimport DropDownHead from '../DropDownHead/DropDownHead';\nimport GenericButton from '../GenericButton/GenericButton';\nimport StartButton from '../StartButton/StartButton';\nimport Main from '../Main/Main';\nimport ClearButtonsContainer from '../ClearButtonsContainer/ClearButtonsContainer'\nimport ClearButton from '../ClearButton/ClearButton';\nimport GridContainer from '../GridContainer/GridContainer';\nimport GridBoard from '../GridBoard/GridBoard';\n\nimport WindowWarning from '../WindowWarning/WindowWarning';\n\nimport './App.css';\n\nimport dfs from \"../../algorithms/dfs\";\nimport bfs from \"../../algorithms/bfs\";\nimport mazeGen from \"../../algorithms/mazeGen\";\n\nlet gridBoard = [];\nfor (let i = 0; i < 15; i++) {\n    let row = [];\n    for (let j = 0; j < 41; j++) {\n        let node = {\n          x: j,\n          y: i,\n          isStart: false,\n          isEnd: false,\n          isWall: false,\n          isSeen: false,\n          isPath: false\n        };\n        row.push(node);\n      }\n      gridBoard.push(row);\n}\n\nfunction App() {\n  const [windowSize, setWindowSize] = useState(getWindowSize());\n  const [start, setStart] = useState(false);\n  const [speed, setSpeed] = useState(50);\n  const [board, setBoard] = useState(gridBoard);\n  const [wholePath , setWholePath] = useState([]);\n  const [mazePath, setMazePath] = useState([]);\n  const [path, setPath] = useState([]);\n  const [algorithm, setAlgorithm] = useState(\"dfs\");\n  \n  useEffect(() => {\n    function handleWindowResize() {\n      setWindowSize(getWindowSize());\n    }\n\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, []);\n\n  useEffect( () => {\n    drawWholePath();\n  }, [wholePath])\n\n  useEffect( () => {\n    drawMaze();\n  }, [mazePath])\n  \n  function handleStart() {\n    if (!start) {\n      clearPath();\n      setStart(true);\n      if (wholePath) {\n        visualizeAlgorithm();\n      }\n    }\n  }\n\n  function handleMazeButton() {\n    if (!start) {\n      clearBoard();\n      setStart(true);\n      if (mazePath) {\n        visualizeMaze();\n      }\n    }\n  }\n  \n  function handleSpeed(text) {\n    if (text === \"Slow\") {\n      setSpeed(200);\n    } else if (text === \"Normal\") {\n      setSpeed(100);\n    } else if (text === \"Fast\") {\n      setSpeed(50);\n    }\n  }\n\n  function handleAlgorithm(text) {\n    setAlgorithm(text.toLowerCase());\n  }\n\n  function visualizeMaze() {\n    let newMazePath;\n\n    newMazePath = mazeGen(board, [1, board[0].length - 2], [1, board.length - 2], true);\n\n    setMazePath(() => newMazePath);\n  }\n\n  function visualizeAlgorithm() {\n    let startAndEnd = findStartAndEnd();\n    let result;\n\n    if (startAndEnd[0].length !== 0 && startAndEnd[1].length !== 0 && algorithm !== \"\") {\n\n      if (algorithm === \"dfs\") {\n        result = dfs(board, [startAndEnd[0][0].x, startAndEnd[0][0].y], [startAndEnd[1][0].x, startAndEnd[1][0].y], true);\n      } else if (algorithm === \"bfs\") {\n        result = bfs(board, [startAndEnd[0][0].x, startAndEnd[0][0].y], [startAndEnd[1][0].x, startAndEnd[1][0].y], true);\n      }\n\n      let newWholePath = result[0];\n      let newPath = result[1];\n      newPath.reverse();\n\n      setWholePath(() => newWholePath);\n      setPath(() => newPath);\n    }\n    else {\n      setStart(false);\n    }\n  }\n\n  function drawMaze() {\n    let i = 0;\n    let myInterval = setInterval( () => {\n      if (i < mazePath.length) {\n        let x = mazePath[i].x;\n        let y = mazePath[i].y;\n        let newBoard = [...board];\n        newBoard[y][x].isWall = true;\n        setBoard(newBoard);\n        i++;\n      }\n      if (i === mazePath.length) {\n        clearInterval(myInterval);\n        setStart(false);\n      }\n    }, 50);    \n  }\n\n  function drawWholePath() {\n    let i = 0;\n    if (!wholePath) return;\n    let myInterval = setInterval( () => {\n      if (i < wholePath.length) {\n        let x = wholePath[i].x;\n        let y = wholePath[i].y;\n        let newBoard = [...board];\n        newBoard[y][x].isSeen = true;\n        setBoard(newBoard);\n        i++;\n      }\n      if (i === wholePath.length) {\n        clearInterval(myInterval);\n        setTimeout(() => {\n          drawPath();\n        }, 250)\n      }\n    }, speed);\n  }\n\n  function drawPath () {\n    let i = 0;\n\n    if (!path) return;\n    let myInterval = setInterval( () => {\n      if (i < path.length) {\n        let x = path[i].x;\n        let y = path[i].y;\n        let newBoard = [...board];\n        newBoard[y][x].isPath = true;\n        setBoard(newBoard);\n        i++;\n      }\n      if (i === path.length) {\n        clearInterval(myInterval);\n        setStart(false);\n      }\n    }, speed);\n  }\n\n  function findStartAndEnd() {\n    let start = [];\n    let end = [];\n    \n    board.forEach(row => row.forEach(node => {\n      if (node.isStart) {\n        start.push(node);\n      } else if (node.isEnd) {\n        end.push(node);\n      }\n    }));\n    \n    return ([start, end]);\n  }\n  \n  function alterBoard(x, y, type) {\n    if (start) return;\n\n    setWholePath([]);\n    setPath([]);\n    clearPath();\n    let newBoard = [...board];\n    \n    if (type === \"isEmpty\") {\n      let boardEnds = findStartAndEnd();\n      if (boardEnds[0].length === 0) {\n        newBoard[y][x].isStart = true;\n        setBoard(newBoard);\n      } else if (boardEnds[1].length === 0) {\n        newBoard[y][x].isEnd = true;\n        setBoard(newBoard);\n      }\n    }\n    \n    if (type === \"isWall\" || type === \"isStart\" || type === \"isEnd\") {\n      newBoard[y][x][type] = !newBoard[y][x][type];\n      setBoard(newBoard);\n    }\n  }\n\n  function clearPath() {\n    if (start) return;\n    let newBoard = [...board];\n    newBoard.forEach(row => row.forEach(node => {\n      node.isSeen = false;\n      node.isPath = false;\n    }));\n    setBoard(newBoard);\n  }\n\n  function clearBoard() {\n    if (start) return;\n    let newBoard = [...board];\n    newBoard.forEach(row => row.forEach(node => {\n      node.isStart = false;\n      node.isEnd = false;\n      node.isWall = false;\n      node.isSeen = false;\n      node.isPath = false;\n    }));\n    setBoard(newBoard);\n  }\n\n  function clearWalls() {\n    if (start) return;\n    let newBoard = [...board];\n    newBoard.forEach(row => row.forEach(node => {\n      node.isWall = false;\n      node.isSeen = false;\n      node.isPath = false;\n    }));\n    setBoard(newBoard);\n  }\n\n  return (\n    <div className=\"App\">\n        {windowSize.innerWidth >= 1360 ? (\n          <>\n            <Header>\n              <Logo data=\"Pathfinder\"/>\n              <DropDownHead name=\"Algorithms\" changeParentState={handleAlgorithm} listItems={[\"DFS\", \"BFS\"/*, \"Dijkstra\", \"AStar\"*/]} />\n              <DropDownHead name=\"Speed\" changeParentState={handleSpeed} listItems={[\"Slow\", \"Normal\", \"Fast\"]} />\n              <GenericButton name=\"Maze\" onClick={handleMazeButton}/>\n              <StartButton onClick={handleStart}/>\n              <Logo data={\"Visualizer\"}/>\n            </Header>\n            <Main>\n              <ClearButtonsContainer>\n                <ClearButton data=\"Path\" clearingFunction={clearPath}/>\n                <ClearButton data=\"Board\" clearingFunction={clearBoard}/>\n                <ClearButton data=\"Walls\" clearingFunction={clearWalls}/>\n              </ClearButtonsContainer>\n              <GridContainer>\n                <GridBoard started={start} board={board} alterBoard={alterBoard}/>\n              </GridContainer>\n            </Main>\n          </> ) : (\n            <WindowWarning />\n          )}\n      </div>\n    )\n}\n\nfunction getWindowSize() {\n  const {innerWidth, innerHeight} = window;\n  return {innerWidth, innerHeight};\n}\n\nexport default App;","import Queue from '../dataEstructures/queue';\nimport { findNeighbors } from './functions';\n\nexport default function bfs(board, startXY, endXY) {\n    const boardDimentions = board.length * board[0].length;\n    const queue = new Queue(boardDimentions);\n\n    let boardSeen = [];\n    for (let i = 0; i < board.length; i++) {\n        let row = [];\n        for (let j = 0; j < board[0].length; j++) {\n            row.push(false);\n        }\n        boardSeen.push(row);\n    }\n\n    const wholePath = [];\n    const pathToEnd = [];\n\n    const newBoard = [...board];\n\n    let start = newBoard[startXY[1]][startXY[0]];\n    let end = newBoard[endXY[1]][endXY[0]]; \n\n    queue.add(start);\n\n    while (queue.length() > 0) {\n        let current = queue.pop();\n        wholePath.push(current);\n\n        if (current === end) {\n            break;\n        }\n\n        let neighbors = findNeighbors(current.x, current.y, newBoard, boardSeen);\n        neighbors.forEach(neighbor => {\n            queue.add(neighbor);\n            boardSeen[neighbor.y][neighbor.x] = true;\n            neighbor.parent = current;\n        });\n    }\n\n    let currentNode = end;\n    while (currentNode.x !== start.x || currentNode.y !== start.y) {\n        pathToEnd.push(currentNode);\n        currentNode = currentNode.parent;\n    }\n\n    if (currentNode.x !== start.x || currentNode.y !== start.y) {\n        pathToEnd.push(currentNode);\n    }\n\n    return [wholePath, pathToEnd];\n}","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './components/App/App';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}