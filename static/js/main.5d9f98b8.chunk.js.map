{"version":3,"sources":["components/Header/Header.jsx","components/Logo/Logo.jsx","components/DropDownMenu/DropDownMenu.jsx","components/DropDownHead/DropDownHead.jsx","components/GenericButton/GenericButton.jsx","components/StartButton/StartButton.jsx","components/Main/Main.jsx","components/ClearButtonsContainer/ClearButtonsContainer.jsx","components/ClearButton/ClearButton.jsx","components/GridContainer/GridContainer.jsx","components/GridNode/GridNode.jsx","components/GridBoard/GridBoard.jsx","components/InstructionsContainer/InstructionsContainer.jsx","components/WindowWarning/WindowWarning.jsx","algorithms/dfs.js","algorithms/functions.js","dataEstructures/queue.js","algorithms/mazeGen.js","components/App/App.jsx","languageOptions/english.js","languageOptions/spanish.js","algorithms/bfs.js","index.js"],"names":["Header","props","react_default","a","createElement","children","Logo","className","data","DropDownMenu","DropDownItem","href","onClick","e","onChange","currentTarget","innerText","changeParentState","name","listItems","map","item","key","DropDownHead","_useState","useState","_useState2","Object","slicedToArray","open","setOpen","_useState3","_useState4","selected","setSelected","DropDownMenu_DropDownMenu","GenericButton","StartButton","Main","ClearButtonsContainer","ClearButton","clearingFunction","GridContainer","GridNode","content","seen","alterBoard","x","y","onContextMenu","preventDefault","GridBoard","board","row","node","GridNode_GridNode","isStart","isEnd","isWall","isPath","isSeen","InstructionsContainer","LanguageButton","text","target","handleInstructionChangeRight","language","onInstructionChange","onClosure","instructionNumber","Fragment","instructions","onLanguageChange","WindowWarning","error","errorTitle","errorContent","title","src","width","height","frameBorder","allowFullScreen","newBoard","boardSeen","wholePath","pathToEnd","findNeighbors","i","dx","dy","neighbors","nx","ny","length","push","Queue","size","classCallCheck","this","rear","element","isEmpty","shift","console","log","tempBoard","englishNavbarOptions","algoTitle","algoOptions","speedTitle","speedOptions","mazeTitle","startTitle","englishClearButtonOptions","clearTitle","boardTitle","pathTitle","wallsTitle","englishInstructionsTitles","0","1","2","3","englishInstructions","4","englishWindowError","spanishNavbarOptions","spanishClearButtonOptions","spanishInstructionsTitles","spanishInstructions","spanishWindowError","gridBoard","j","getWindowSize","_window","window","innerWidth","innerHeight","App","windowSize","setWindowSize","setLanguage","_useState5","_useState6","navbarOptions","setNavbarOptions","_useState7","_useState8","clearButtonOptions","setClearButtonOptions","_useState9","_useState10","openInstructions","setOpenInstructions","_useState11","_useState12","currentInstruction","setCurrentInstruction","_useState13","_useState14","instructionsTitles","setInstructionsTitles","_useState15","_useState16","setInstructions","_useState17","_useState18","setError","_useState19","_useState20","start","setStart","_useState21","_useState22","speed","setSpeed","_useState23","_useState24","setBoard","_useState25","_useState26","setWholePath","_useState27","_useState28","mazePath","setMazePath","_useState29","_useState30","path","setPath","_useState31","_useState32","algorithm","setAlgorithm","findStartAndEnd","end","forEach","clearPath","toConsumableArray","clearBoard","useEffect","handleWindowResize","addEventListener","removeEventListener","myInterval","setInterval","clearInterval","setTimeout","drawPath","drawWholePath","drawMaze","InstructionsContainer_InstructionsContainer","toLowerCase","num","components_Header_Header","Logo_Logo","DropDownHead_DropDownHead","GenericButton_GenericButton","newMazePath","mazeGen","boardDimX","boardDimY","root","cell","objectSpread","wall","orientation","dimX","dimY","Math","floor","random","emptyNodes","notEmpty","mainDims","crossDim","visualizeMaze","StartButton_StartButton","result","startAndEnd","dfs","startXY","endXY","parent","currentNode","boardDimentions","queue","add","_loop","current","pop","neighbor","bfs","newWholePath","newPath","reverse","visualizeAlgorithm","Main_Main","ClearButtonsContainer_ClearButtonsContainer","ClearButton_ClearButton","GridContainer_GridContainer","GridBoard_GridBoard","started","type","boardEnds","WindowWarning_WindowWarning","ReactDOM","createRoot","document","getElementById","render","StrictMode","components_App_App"],"mappings":"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","file":"static/js/main.5d9f98b8.chunk.js","sourcesContent":["import React from 'react'\nimport './Header.css';\n\nfunction Header(props) {\n  return (\n    <header>\n      {props.children}\n    </header>\n  )\n}\n\nexport default Header;","import React from 'react'\nimport './Logo.css';\n\nexport default function Logo(props) {\n  return (\n      <h1 className=\"logo\">{props.data}</h1>\n  )\n}\n","import React from 'react'\nimport './DropDownMenu.css'\n\nexport default function DropDownMenu(props) {\n    \n    function DropDownItem(props) {\n        return (\n            <p href=\"#\" className=\"dropdown-item\" onClick={e => {\n                props.onChange(e.currentTarget.innerText)\n                props.changeParentState(e.currentTarget.innerText)\n            }}>{props.name}</p>\n        )\n    }\n\n    return (\n        <div className='dropdown'>\n            {props.listItems.map(item => <DropDownItem key={item} name={item} onChange={props.onChange} changeParentState={props.changeParentState}/>)}\n        </div>\n    )\n}\n","import React, { useState } from 'react'\nimport DropDownMenu from \"../DropDownMenu/DropDownMenu\";\nimport './DropDownHead.css'\n\nexport default function DropDownHead(props) {\n  const [open, setOpen] = useState(false);\n  const [selected, setSelected] = useState(\"\");\n\n  return (\n    <div className=\"dropdown-menu\" onClick={() => setOpen(!open)}>\n      {selected || props.name} <i className=\"fa-solid fa-caret-down\"></i>\n      \n      {open && <DropDownMenu changeParentState={props.changeParentState} listItems={props.listItems} onChange={setSelected}/>}\n\n    </div>\n  )\n}\n","import React from 'react'\nimport './GenericButton.css'\n\nexport default function GenericButton(props) {\n  return (\n    <div className=\"generic-button\" onClick={props.onClick}>{props.name}</div>\n  )\n}\n","import React from 'react';\nimport './StartButton.css';\n\nexport default function StartButton(props) {\n  return (\n    <div className=\"start-button\" onClick={props.onClick}>{props.name}</div>\n  )\n}\n","import React from 'react'\n\nimport './Main.css'\n\nexport default function Main(props) {\n  return (\n    <main>\n        {props.children}\n    </main>\n  )\n}\n","import React from 'react'\nimport './ClearButtonsContainer.css';\n\nexport default function ClearButtonsContainer(props) {\n  return (\n    <div className=\"container\">\n      {props.children}\n    </div>\n  )\n}\n","import React from 'react';\nimport './ClearButton.css';\n\nexport default function ClearButton(props) {\n  return (\n    <div className=\"clear-button\" onClick={props.clearingFunction}>{props.data}</div>\n  )\n}\n","import React from 'react';\nimport './GridContainer.css';\n\nexport default function GridContainer(props) {\n  return (\n    <div className=\"grid-container\">\n        {props.children}\n    </div>\n  )\n}\n","import React from 'react'\nimport './GridNode.css';\n\nexport default function GridNode(props) {\n  function changeContentToWall() {\n    if (props.content === \"isEmpty\" || props.content === \"isWall\") {\n      props.alterBoard(props.x, props.y, \"isWall\");\n    }\n  };\n\n  function changeContentToInitialOrFinal() {\n    if (props.content === \"isEmpty\") {\n      props.alterBoard(props.x, props.y, \"isEmpty\");\n    } else if (props.content === \"isStart\") {\n      props.alterBoard(props.x, props.y, \"isStart\");\n    } else if (props.content === \"isEnd\") {\n      props.alterBoard(props.x, props.y, \"isEnd\");\n    }\n  };\n\n  return (\n    <div className={\"grid-node \" + props.content + \" \" + props.seen} onClick={changeContentToInitialOrFinal} onContextMenu={e => {\n      e.preventDefault();\n      changeContentToWall();\n    }}>\n      {props.content === \"isStart\" ? <i className={\"fa-solid fa-play \" + props.content}></i> : props.content === \"isEnd\" ? <i className={\"fa-solid fa-flag-checkered \" + props.content}></i> : props.content === \"isWall\" ? <i className={\"fa-solid fa-ghost \" + props.content}></i> : \"\"}\n    </div>\n  )\n}\n","import React from 'react';\nimport GridNode from '../GridNode/GridNode';\nimport './GridBoard.css';\n\nexport default function GridBoard(props) {\n  return (\n    <div className=\"grid\">\n        {props.board.map(row => row.map(node => <GridNode key={node.x + node.y} x={node.x} y={node.y} content={node.isStart ? \"isStart\" : node.isEnd ? \"isEnd\" : node.isWall ? \"isWall\" : \"isEmpty\"} seen={node.isPath? \"isPath\" : node.isSeen ? \"isSeen\" : \"isNotSeen\"} alterBoard={props.alterBoard} />))}\n    </div>\n  )\n}\n","import React from 'react';\nimport \"./InstructionsContainer.css\";\n\nexport default function InstructionsContainer(props) {    \n\n    function LanguageButton(props) {\n\n        function handleClick(e) {\n            let text = e.target.innerText;\n            props.onClick(text)\n            handleInstructionChangeRight();\n        }\n\n        return (\n            <button className=\"language-button\" onClick={handleClick}>{props.language}</button>\n        );\n    }\n\n    function handleInstructionChangeLeft() {\n        props.onInstructionChange(-1);\n    }\n\n    function handleInstructionChangeRight() {\n        props.onInstructionChange(1);\n    }\n\n    return (\n        <div className=\"instructions-container\">\n            <i className=\"fa-solid fa-arrow-left arrow-left\" onClick={handleInstructionChangeLeft}></i>\n            <div className=\"instructions-container-data\">\n                <div className=\"instructions-container-close\" onClick={props.onClosure}>\n                    <i className=\"fa-solid fa-xmark\"></i>\n                </div>\n                {props.instructionNumber === 0 ? (\n                    <>\n                        <h1>{props.instructions[0][props.instructionNumber]}</h1>\n                        <div className=\"language-buttons-container\">\n                            <LanguageButton language=\"Español\" onClick={props.onLanguageChange} />\n                            <LanguageButton language=\"English\" onClick={props.onLanguageChange} />\n                        </div>\n                    </>\n                ) : (\n                    <>\n                        <h1>{props.instructions[0][props.instructionNumber]}</h1>\n                        <p>{props.instructions[1][props.instructionNumber]}</p>\n                        {props.instructionNumber === 3 && (<a href={props.instructions[1][4]}>{props.instructions[1][4]}</a>)}\n                    </>\n                )}\n            </div>\n            <i className=\"fa-solid fa-arrow-right arrow-right\" onClick={handleInstructionChangeRight}></i>\n        </div>\n    )\n}\n","import React from 'react'\nimport \"./WindowWarning.css\"\n\nexport default function WindowWarning(props) {\n  return (\n    <div className=\"window-warning\">\n        <h1 className=\"error-title\">{props.error.errorTitle}</h1>\n        <p className=\"error-message\">{props.error.errorContent}</p>\n        <iframe title=\"sad-gif\" src=\"https://giphy.com/embed/7SF5scGB2AFrgsXP63\" width=\"480\" height=\"272\" frameBorder=\"0\" className=\"giphy-embed\" allowFullScreen></iframe>\n    </div>\n  )\n}\n","import { findNeighbors } from './functions';\n\nlet newBoard, boardSeen, wholePath, pathToEnd;\n\nexport default function dfs(board, startXY, endXY, root) {\n\n    if (root) {\n        newBoard = [...board];\n        wholePath = [];\n        pathToEnd = [];\n\n        boardSeen = [];\n        for (let i = 0; i < 15; i++) {\n            let row = [];\n            for (let j = 0; j < 41; j++) {\n                row.push(false);\n            }\n            boardSeen.push(row);\n        }\n    }\n\n    let start = newBoard[startXY[1]][startXY[0]];\n    let end = newBoard[endXY[1]][endXY[0]];\n\n    // Terminate if the goal is reached\n    if (startXY[0] === endXY[0] && startXY[1] === endXY[1]) {\n        return [wholePath, pathToEnd, true];\n    }\n\n    // Visite current node\n    boardSeen[start.y][start.x] = true;\n\n    // Add current node to whole path\n    wholePath.push(start);\n\n    // Take unvisited neighbors in order\n    let neighbors = findNeighbors(start.x, start.y, newBoard, boardSeen);\n    for (let i = 0; i < neighbors.length; i++) {\n        neighbors[i].parent = start;\n\n        // Recurse and Terminate if the goal is reached\n        if (dfs(newBoard, [neighbors[i].x, neighbors[i].y], [end.x, end.y], false)[2]) {\n\n            // Backtrack\n            if (root) {\n                let currentNode = end;\n                while (currentNode.x !== start.x || currentNode.y !== start.y) {\n                    pathToEnd.push(currentNode);\n                    currentNode = currentNode.parent;\n                }\n\n                if (currentNode.x !== start.x || currentNode.y !== start.y) {\n                    pathToEnd.push(currentNode);\n                }\n            }\n\n            return [wholePath, pathToEnd, true];\n        }\n    }\n\n    return [wholePath, pathToEnd, false];\n}","export function findNeighbors(x, y, board, boardSeen) {\n    let i = 0;\n\n    const dx = [1,  0, -1, 0];\n    const dy = [0, -1,  0, 1];\n\n    let neighbors = [];\n    for (i = 0; i < 4; i++) {\n        const nx = x + dx[i];\n        const ny = y + dy[i];\n        const condition = (ny >= 0 && ny < board.length) && (nx >= 0 && nx < board[0].length)\n\n        if (condition && board[ny][nx].isWall === false && boardSeen[ny][nx] === false) {\n            neighbors.push(board[ny][nx]);\n        }\n    }\n\n    return neighbors;\n}","export default class Queue {\n    constructor(size){\n        this.data = [];\n        this.rear = 0;\n        this.size = size;\n    }\n\n    add(element) {\n        if(this.rear < this.size ) {\n            this.data[this.rear] = element;\n            this.rear = this.rear + 1;\n        }\n    }\n\n    length() {  \n        return this.rear;\n    }\n\n    isEmpty() {\n        return this.rear === 0;\n    }\n\n    getFront() {\n        if(this.isEmpty() === false) {\n            return this.data[0];\n        }\n    }\n\n    getLast() {\n        if(this.isEmpty() === false) {\n            return this.data[ this.rear - 1 ] ;\n        }\n    }\n\n    pop() {\n        if(this.isEmpty() === false) {\n            this.rear = this.rear-1;\n            return this.data.shift();\n        }\n    }\n\n    print() { \n        for(let i =0; i < this.rear; i++) {\n            console.log(this.data[i]);\n        }\n    }\n\n    clear() {\n        this.data.length = 0;\n        this.rear = 0;\n    }\n }","let tempBoard, wholePath;\n\nexport default function mazeGen(board, boardDimX, boardDimY, root) {\n\n    if (root) {\n        tempBoard = board.map(row => row.map(cell => ({...cell, wall: false})));\n        wholePath = [];\n\n        for (let i = 0; i < board[0].length; i++) {\n            tempBoard[0][i].wall = true;\n            wholePath.push(tempBoard[0][i]);\n\n            tempBoard[board.length - 1][i].wall = true;\n            wholePath.push(tempBoard[board.length - 1][i]);\n        }\n\n        for (let i = 0; i < board.length; i++) {\n            tempBoard[i][0].wall = true;\n            wholePath.push(tempBoard[i][0]);\n\n            tempBoard[i][board[0].length - 1].wall = true;\n            wholePath.push(tempBoard[i][board[0].length - 1]);\n        }\n\n    }\n    \n    let dimX = boardDimX[1] - boardDimX[0] + 1;\n    let dimY = boardDimY[1] - boardDimY[0] + 1;\n    \n    let orientation;\n    if (dimX > dimY) {\n        orientation = true;\n    } else if (dimX < dimY) {\n        orientation = false;\n    } else {\n        orientation = [true, false][Math.floor(Math.random() * 2)];\n    }\n\n    if (orientation && (dimX > 2 && dimY > 2)) {\n        let x = Math.floor(Math.random() * (dimX - 2)) + boardDimX[0] + 1;\n        let emptyNodes = []\n        emptyNodes.push(Math.floor(Math.random() * dimY) + boardDimY[0]);\n\n        if (tempBoard[boardDimY[0] - 1][x].wall !== true) {  \n            emptyNodes.push(boardDimY[0]);\n        }\n\n        if (tempBoard[boardDimY[1] + 1][x].wall !== true) {\n            emptyNodes.push(boardDimY[1]);\n        }\n\n        if (emptyNodes.length > 1) {\n            emptyNodes.shift()\n        }\n\n        for (let i = boardDimY[0]; i <= boardDimY[1]; i++) {\n            let notEmpty = true;\n            for (let j = 0; j < emptyNodes.length; j++) {\n                if (i === emptyNodes[j]) {\n                    notEmpty = false;\n                    break;\n                }\n            }\n            if (notEmpty) {\n                tempBoard[i][x].wall = !tempBoard[i][x].wall;\n                wholePath.push(tempBoard[i][x]);\n            }\n        }\n\n        let mainDims = [ [boardDimX[0], x - 1], [x + 1, boardDimX[1]] ];\n\n        let crossDim = boardDimY;\n\n        for (let i = 0; i < 2; i++) {\n            mazeGen(board, mainDims[i], crossDim, false);\n        }\n\n    } else if (!orientation && (dimX > 2 && dimY > 2)) {\n        let y = Math.floor(Math.random() * (dimY - 2)) + boardDimY[0] + 1;\n        let emptyNodes = [];\n        emptyNodes.push(Math.floor(Math.random() * dimX) + boardDimX[0]);\n\n        if (tempBoard[y][boardDimX[0] - 1].wall !== true) {\n            emptyNodes.push(boardDimX[0]);\n        }\n\n        if (tempBoard[y][boardDimX[1] + 1].wall !== true) {\n            emptyNodes.push(boardDimX[1]);\n        }\n\n        if (emptyNodes.length > 1) {\n            emptyNodes.shift()\n        }\n        \n        for (let i = boardDimX[0]; i <= boardDimX[1]; i++) {\n            let notEmpty = true;\n            for (let j = 0; j < emptyNodes.length; j++) {\n                if (i === emptyNodes[j]) {\n                    notEmpty = false;\n                    break;\n                }\n            }\n            if (notEmpty) {\n                tempBoard[y][i].wall = !tempBoard[y][i].wall;\n                wholePath.push(tempBoard[y][i]);\n            }\n        }\n\n        let mainDims = [ [boardDimY[0], y - 1], [y + 1, boardDimY[1]] ];\n\n        let crossDim = boardDimX;\n\n        for (let i = 0; i < 2; i++) {\n            mazeGen(board, crossDim, mainDims[i], false);\n        }\n    }\n\n    return wholePath;\n}","import React, { useState, useEffect } from 'react';\nimport Header from '../Header/Header';\nimport Logo from '../Logo/Logo';\nimport DropDownHead from '../DropDownHead/DropDownHead';\nimport GenericButton from '../GenericButton/GenericButton';\nimport StartButton from '../StartButton/StartButton';\nimport Main from '../Main/Main';\nimport ClearButtonsContainer from '../ClearButtonsContainer/ClearButtonsContainer'\nimport ClearButton from '../ClearButton/ClearButton';\nimport GridContainer from '../GridContainer/GridContainer';\nimport GridBoard from '../GridBoard/GridBoard';\nimport InstructionsContainer from '../InstructionsContainer/InstructionsContainer';\n\nimport WindowWarning from '../WindowWarning/WindowWarning';\n\nimport './App.css';\n\nimport dfs from \"../../algorithms/dfs\";\nimport bfs from \"../../algorithms/bfs\";\nimport mazeGen from \"../../algorithms/mazeGen\";\n\nimport {englishNavbarOptions, englishClearButtonOptions, englishInstructionsTitles, englishInstructions, englishWindowError} from \"../../languageOptions/english\";\nimport {spanishNavbarOptions, spanishClearButtonOptions, spanishInstructionsTitles, spanishInstructions, spanishWindowError} from \"../../languageOptions/spanish\";\n\nlet gridBoard = [];\nfor (let i = 0; i < 15; i++) {\n    let row = [];\n    for (let j = 0; j < 41; j++) {\n        let node = {\n          x: j,\n          y: i,\n          isStart: false,\n          isEnd: false,\n          isWall: false,\n          isSeen: false,\n          isPath: false\n        };\n        row.push(node);\n      }\n      gridBoard.push(row);\n}\n\nfunction App() {\n  const [windowSize, setWindowSize] = useState(getWindowSize());\n\n  const [language, setLanguage] = useState(\"english\");\n  const [navbarOptions, setNavbarOptions] = useState(englishNavbarOptions);\n  const [clearButtonOptions, setClearButtonOptions] = useState(englishClearButtonOptions);\n\n  const [openInstructions, setOpenInstructions] = useState(true);\n  const [currentInstruction, setCurrentInstruction] = useState(0);\n  const [instructionsTitles, setInstructionsTitles] = useState(englishInstructionsTitles);\n  const [instructions, setInstructions] = useState(englishInstructions);\n\n  const [error, setError] = useState(englishWindowError);\n\n  const [start, setStart] = useState(false);\n  const [speed, setSpeed] = useState(50);\n  const [board, setBoard] = useState(gridBoard);\n  const [wholePath , setWholePath] = useState([]);\n  const [mazePath, setMazePath] = useState([]);\n  const [path, setPath] = useState([]);\n  const [algorithm, setAlgorithm] = useState(\"dfs\");\n\n  useEffect(() => {\n    if (language === \"english\") {\n      setNavbarOptions(englishNavbarOptions);\n      setClearButtonOptions(englishClearButtonOptions);\n      setInstructionsTitles(englishInstructionsTitles);\n      setInstructions(englishInstructions);\n      setError(englishWindowError);\n    } else {\n      setNavbarOptions(spanishNavbarOptions);\n      setClearButtonOptions(spanishClearButtonOptions);\n      setInstructionsTitles(spanishInstructionsTitles);\n      setInstructions(spanishInstructions);\n      setError(spanishWindowError);\n    }\n  }, [language]);\n  \n  useEffect(() => {\n    function handleWindowResize() {\n      setWindowSize(getWindowSize());\n    }\n\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, []);\n\n  useEffect( () => {\n    drawWholePath();\n  }, [wholePath])\n\n  useEffect( () => {\n    drawMaze();\n  }, [mazePath])\n  \n  function handleLanguage(text) {\n    setLanguage(text.toLowerCase());\n  }\n\n  function handleInstructionChange(num) {\n    if (currentInstruction + num >= 0 && currentInstruction + num < 4) {\n      setCurrentInstruction(currentInstruction + num);\n    } else if (currentInstruction + num === 4) {\n      setOpenInstructions(false);\n    }\n  }\n\n  function handleStart() {\n    if (!start) {\n      clearPath();\n      setStart(true);\n      if (wholePath) {\n        visualizeAlgorithm();\n      }\n    }\n  }\n\n  function handleMazeButton() {\n    if (!start) {\n      clearBoard();\n      setStart(true);\n      if (mazePath) {\n        visualizeMaze();\n      }\n    }\n  }\n  \n  function handleSpeed(text) {\n    if (text === navbarOptions.speedOptions[0]) {\n      setSpeed(200);\n    } else if (text === navbarOptions.speedOptions[1]) {\n      setSpeed(100);\n    } else if (text === navbarOptions.speedOptions[2]) {\n      setSpeed(50);\n    }\n  }\n\n  function handleAlgorithm(text) {\n    setAlgorithm(text.toLowerCase());\n  }\n\n  function visualizeMaze() {\n    let newMazePath;\n\n    newMazePath = mazeGen(board, [1, board[0].length - 2], [1, board.length - 2], true);\n\n    setMazePath(() => newMazePath);\n  }\n\n  function visualizeAlgorithm() {\n    let startAndEnd = findStartAndEnd();\n    let result;\n\n    if (startAndEnd[0].length !== 0 && startAndEnd[1].length !== 0 && algorithm !== \"\") {\n\n      if (algorithm === \"dfs\") {\n        result = dfs(board, [startAndEnd[0][0].x, startAndEnd[0][0].y], [startAndEnd[1][0].x, startAndEnd[1][0].y], true);\n      } else if (algorithm === \"bfs\") {\n        result = bfs(board, [startAndEnd[0][0].x, startAndEnd[0][0].y], [startAndEnd[1][0].x, startAndEnd[1][0].y], true);\n      }\n\n      let newWholePath = result[0];\n      let newPath = result[1];\n      newPath.reverse();\n\n      setWholePath(() => newWholePath);\n      setPath(() => newPath);\n    }\n    else {\n      setStart(false);\n    }\n  }\n\n  function drawMaze() {\n    let i = 0;\n    let myInterval = setInterval( () => {\n      if (i < mazePath.length) {\n        let x = mazePath[i].x;\n        let y = mazePath[i].y;\n        let newBoard = [...board];\n        newBoard[y][x].isWall = true;\n        setBoard(newBoard);\n        i++;\n      }\n      if (i === mazePath.length) {\n        clearInterval(myInterval);\n        setStart(false);\n      }\n    }, 50);    \n  }\n\n  function drawWholePath() {\n    let i = 0;\n    if (!wholePath) return;\n    let myInterval = setInterval( () => {\n      if (i < wholePath.length) {\n        let x = wholePath[i].x;\n        let y = wholePath[i].y;\n        let newBoard = [...board];\n        newBoard[y][x].isSeen = true;\n        setBoard(newBoard);\n        i++;\n      }\n      if (i === wholePath.length) {\n        clearInterval(myInterval);\n        setTimeout(() => {\n          drawPath();\n        }, 250)\n      }\n    }, speed);\n  }\n\n  function drawPath () {\n    let i = 0;\n\n    if (!path) return;\n    let myInterval = setInterval( () => {\n      if (i < path.length) {\n        let x = path[i].x;\n        let y = path[i].y;\n        let newBoard = [...board];\n        newBoard[y][x].isPath = true;\n        setBoard(newBoard);\n        i++;\n      }\n      if (i === path.length) {\n        clearInterval(myInterval);\n        setStart(false);\n      }\n    }, speed);\n  }\n\n  function findStartAndEnd() {\n    let start = [];\n    let end = [];\n    \n    board.forEach(row => row.forEach(node => {\n      if (node.isStart) {\n        start.push(node);\n      } else if (node.isEnd) {\n        end.push(node);\n      }\n    }));\n    \n    return ([start, end]);\n  }\n  \n  function alterBoard(x, y, type) {\n    if (start) return;\n\n    setWholePath([]);\n    setPath([]);\n    clearPath();\n    let newBoard = [...board];\n    \n    if (type === \"isEmpty\") {\n      let boardEnds = findStartAndEnd();\n      if (boardEnds[0].length === 0) {\n        newBoard[y][x].isStart = true;\n        setBoard(newBoard);\n      } else if (boardEnds[1].length === 0) {\n        newBoard[y][x].isEnd = true;\n        setBoard(newBoard);\n      }\n    }\n    \n    if (type === \"isWall\" || type === \"isStart\" || type === \"isEnd\") {\n      newBoard[y][x][type] = !newBoard[y][x][type];\n      setBoard(newBoard);\n    }\n  }\n\n  function clearPath() {\n    if (start) return;\n    let newBoard = [...board];\n    newBoard.forEach(row => row.forEach(node => {\n      node.isSeen = false;\n      node.isPath = false;\n    }));\n    setBoard(newBoard);\n  }\n\n  function clearBoard() {\n    if (start) return;\n    let newBoard = [...board];\n    newBoard.forEach(row => row.forEach(node => {\n      node.isStart = false;\n      node.isEnd = false;\n      node.isWall = false;\n      node.isSeen = false;\n      node.isPath = false;\n    }));\n    setBoard(newBoard);\n  }\n\n  function clearWalls() {\n    if (start) return;\n    let newBoard = [...board];\n    newBoard.forEach(row => row.forEach(node => {\n      node.isWall = false;\n      node.isSeen = false;\n      node.isPath = false;\n    }));\n    setBoard(newBoard);\n  }\n\n  return (\n    <div className=\"App\">\n        {windowSize.innerWidth >= 1360 ? (\n          <>\n            {openInstructions && <InstructionsContainer instructions={[instructionsTitles, instructions]} instructionNumber={currentInstruction} onLanguageChange={handleLanguage} onClosure={() => setOpenInstructions(false)} onInstructionChange={handleInstructionChange}/>}\n            <Header>\n              <Logo data=\"Pathfinder\"/>\n              <DropDownHead name={navbarOptions.algoTitle} changeParentState={handleAlgorithm} listItems={navbarOptions.algoOptions} />\n              <DropDownHead name={navbarOptions.speedTitle} changeParentState={handleSpeed} listItems={navbarOptions.speedOptions} />\n              <GenericButton name={navbarOptions.mazeTitle} onClick={handleMazeButton}/>\n              <StartButton name={navbarOptions.startTitle} onClick={handleStart}/>\n              <Logo data={\"Visualizer\"}/>\n            </Header>\n            <Main>\n              <ClearButtonsContainer>\n                <ClearButton data={clearButtonOptions.clearTitle + \" \" + clearButtonOptions.pathTitle} clearingFunction={clearPath}/>\n                <ClearButton data={clearButtonOptions.clearTitle + \" \" + clearButtonOptions.boardTitle} clearingFunction={clearBoard}/>\n                <ClearButton data={clearButtonOptions.clearTitle + \" \" + clearButtonOptions.wallsTitle} clearingFunction={clearWalls}/>\n              </ClearButtonsContainer>\n              <GridContainer>\n                <GridBoard started={start} board={board} alterBoard={alterBoard}/>\n              </GridContainer>\n            </Main>\n          </> ) : (\n            <WindowWarning error={error} />\n          )}\n      </div>\n    )\n}\n\nfunction getWindowSize() {\n  const {innerWidth, innerHeight} = window;\n  return {innerWidth, innerHeight};\n}\n\nexport default App;","export const englishNavbarOptions = {\n    algoTitle: \"Algorithms\",\n    algoOptions: [\"DFS\", \"BFS\"/*, \"Dijkstra\", \"AStar\"*/],\n    speedTitle: \"Speed\",\n    speedOptions: [\"Slow\", \"Medium\", \"Fast\"],\n    mazeTitle: \"Maze\",\n    startTitle: \"Start\"\n}\n\nexport const englishClearButtonOptions = {\n    clearTitle: \"Clear\",\n    boardTitle: \"Board\",\n    pathTitle: \"Path\",\n    wallsTitle: \"Walls\"\n}\n\nexport const englishInstructionsTitles = {\n    0: \"Select a language\",\n    1: \"Welcome to Pathfinder!\",\n    2: \"What is Pathfinder?\",\n    3: \"Investigate!\"\n}\n\nexport const englishInstructions = {\n    1: \"To begin, choose an algorithm and a speed. You can also add your own walls or select the maze generation option. Finally, select a starting and ending point. When you are ready, press the start button to visualize the algorithm. By default, the starting algorithm is DFS with a fast speed.\",\n    2: \"Pathfinder allows you to visualize algorithms such as DFS and BFS. It is important to know that DFS does not necessarily find the shortest path, while BFS does.\",\n    3: \"You can do some research about the algorithms DFS, also known as Depth First Search; and BFS, known as Breadth First Search in the following link:\",\n    4: \"https://www.geeksforgeeks.org/difference-between-bfs-and-dfs/\"\n}\n\nexport const englishWindowError = {\n    errorTitle: \"Window Error!\",\n    errorContent: \"The content of this page cannot be displayed in a screen with a width smaller than 1360px\"\n}","export const spanishNavbarOptions = {\n    algoTitle: \"Algoritmos\",\n    algoOptions: [\"DFS\", \"BFS\"/*, \"Dijkstra\", \"AStar\"*/],\n    speedTitle: \"Velocidad\",\n    speedOptions: [\"Lento\", \"Medio\", \"Rápido\"],\n    mazeTitle: \"Laberinto\",\n    startTitle: \"Iniciar\"\n}\n\nexport const spanishClearButtonOptions = {\n    clearTitle: \"Limpiar\",\n    boardTitle: \"Tablero\",\n    pathTitle: \"Camino\",\n    wallsTitle: \"Paredes\"\n}\n\nexport const spanishInstructionsTitles = {\n    0: \"Elija un idioma\",\n    1: \"¡Bienvenido a Pathfinder!\",\n    2: \"¿Qué hace Pathfinder?\",\n    3: \"¡Tiempo de investigar!\"\n}\n\nexport const spanishInstructions = {\n    1: \"Para empezar, selecciona un algoritmo y una velocidad. Además, puedes añadir tus propias paredes con el click derecho o seleccionar la opción de generar un laberinto. Finalmente, selecciona un punto de inicio y un punto de destino. Cuando estés listo, presiona el botón de iniciar para comenzar el algoritmo. Por defecto, el algoritmo inicial es DFS con una velocidad de rápido.\",\n    2: \"Pathfinder permite visualizar algoritmos de búsqueda de caminos, como DFS y BFS. Es importante saber que DFS no necesariamente encuentra el camino más corto, mientras que BFS sí.\",\n    3: \"Puedes investigar sobre los algoritmos DFS, también conocido como Búsqueda en Profundidad; y BFS, conocido como Búsqueda en anchura en el siguiente enlace:\",\n    4: \"https://www.encora.com/es/blog/dfs-vs-bfs\"\n}\n\nexport const spanishWindowError = {\n    errorTitle: \"¡Error de ventana!\",\n    errorContent: \"El contenido de esta página no se puede mostrar en una pantalla con un ancho inferior a 1360px\"\n}","import Queue from '../dataEstructures/queue';\nimport { findNeighbors } from './functions';\n\nexport default function bfs(board, startXY, endXY) {\n    const boardDimentions = board.length * board[0].length;\n    const queue = new Queue(boardDimentions);\n\n    let boardSeen = [];\n    for (let i = 0; i < board.length; i++) {\n        let row = [];\n        for (let j = 0; j < board[0].length; j++) {\n            row.push(false);\n        }\n        boardSeen.push(row);\n    }\n\n    const wholePath = [];\n    const pathToEnd = [];\n\n    const newBoard = [...board];\n\n    let start = newBoard[startXY[1]][startXY[0]];\n    let end = newBoard[endXY[1]][endXY[0]]; \n\n    queue.add(start);\n\n    while (queue.length() > 0) {\n        let current = queue.pop();\n        wholePath.push(current);\n\n        if (current === end) {\n            break;\n        }\n\n        let neighbors = findNeighbors(current.x, current.y, newBoard, boardSeen);\n        neighbors.forEach(neighbor => {\n            queue.add(neighbor);\n            boardSeen[neighbor.y][neighbor.x] = true;\n            neighbor.parent = current;\n        });\n    }\n\n    let currentNode = end;\n    while (currentNode.x !== start.x || currentNode.y !== start.y) {\n        pathToEnd.push(currentNode);\n        currentNode = currentNode.parent;\n    }\n\n    if (currentNode.x !== start.x || currentNode.y !== start.y) {\n        pathToEnd.push(currentNode);\n    }\n\n    return [wholePath, pathToEnd];\n}","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './components/App/App';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"sourceRoot":""}